var _user$project$Main$andMap = F2(
	function (l, fl) {
		return A3(
			_elm_lang$core$List$map2,
			F2(
				function (x, y) {
					return x(y);
				}),
			fl,
			l);
	});
var _user$project$Main$onKeyDown = function (tagger) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'keydown',
		A2(_elm_lang$core$Json_Decode$map, tagger, _elm_lang$html$Html_Events$keyCode));
};
var _user$project$Main$ishidden = function (chores) {
	return _elm_lang$core$List$isEmpty(chores);
};
var _user$project$Main$selectedview = F2(
	function (visibility, button) {
		return _elm_lang$core$Native_Utils.eq(visibility, button) ? 'selected' : 'notselected';
	});
var _user$project$Main$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$none;
};
var _user$project$Main$visibilitystring = function (vis) {
	var _p0 = vis;
	switch (_p0.ctor) {
		case 'Completed':
			return 'completed items';
		case 'All':
			return 'all items';
		default:
			return 'active items';
	}
};
var _user$project$Main$itemslfet = function (allchores) {
	var l = _elm_lang$core$List$length(allchores);
	return _elm_lang$core$Native_Utils.eq(l, 1) ? '1 item left' : A2(
		_elm_lang$core$Basics_ops['++'],
		_elm_lang$core$Basics$toString(l),
		' items left');
};
var _user$project$Main$onlyCompleted = F2(
	function (bool, model) {
		var iscompl = function (chore) {
			var _p1 = chore.completed;
			if (_p1 === true) {
				return bool;
			} else {
				return !bool;
			}
		};
		return A2(_elm_lang$core$List$filter, iscompl, model.allchores);
	});
var _user$project$Main$discardEmpty = function (clist) {
	var isnothing = function (chore) {
		var _p2 = chore.chore;
		if (_p2.ctor === 'Nothing') {
			return false;
		} else {
			return true;
		}
	};
	return A2(_elm_lang$core$List$filter, isnothing, clist);
};
var _user$project$Main$toggleall = function (model) {
	var _p3 = model.allchores;
	if (_p3.ctor === '[]') {
		return {ctor: '[]'};
	} else {
		return _elm_lang$core$Native_Utils.eq(
			_elm_lang$core$List$length(
				A2(_user$project$Main$onlyCompleted, true, model)),
			_elm_lang$core$List$length(model.allchores)) ? A2(
			_elm_lang$core$List$map,
			function (chore) {
				return _elm_lang$core$Native_Utils.update(
					chore,
					{completed: false});
			},
			model.allchores) : A2(
			_elm_lang$core$List$map,
			function (chore) {
				return _elm_lang$core$Native_Utils.update(
					chore,
					{completed: true});
			},
			model.allchores);
	}
};
var _user$project$Main$updateC = F2(
	function (newchore, model) {
		var isChore2 = F2(
			function (id, chore) {
				return _elm_lang$core$Native_Utils.eq(id, chore.id) ? newchore : chore;
			});
		return A2(
			_elm_lang$core$List$map,
			isChore2(newchore.id),
			model.allchores);
	});
var _user$project$Main$Model = F4(
	function (a, b, c, d) {
		return {allchores: a, nextid: b, view: c, newchore: d};
	});
var _user$project$Main$All = {ctor: 'All'};
var _user$project$Main$init = {
	ctor: '_Tuple2',
	_0: A4(
		_user$project$Main$Model,
		{ctor: '[]'},
		0,
		_user$project$Main$All,
		_elm_lang$core$Maybe$Nothing),
	_1: _elm_lang$core$Platform_Cmd$none
};
var _user$project$Main$Active = {ctor: 'Active'};
var _user$project$Main$Completed = {ctor: 'Completed'};
var _user$project$Main$ChoreMsg = F2(
	function (a, b) {
		return {ctor: 'ChoreMsg', _0: a, _1: b};
	});
var _user$project$Main$chorelist = function (list) {
	var listoffunctions = A2(
		_elm_lang$core$List$map,
		_elm_lang$html$Html$map,
		A2(_elm_lang$core$List$map, _user$project$Main$ChoreMsg, list));
	var listchoresviews = A2(_elm_lang$core$List$map, _user$project$Chore$view, list);
	return A2(_user$project$Main$andMap, listchoresviews, listoffunctions);
};
var _user$project$Main$ClearCompleted = {ctor: 'ClearCompleted'};
var _user$project$Main$ToggleAll = {ctor: 'ToggleAll'};
var _user$project$Main$ChangeView = function (a) {
	return {ctor: 'ChangeView', _0: a};
};
var _user$project$Main$NewChore = {ctor: 'NewChore'};
var _user$project$Main$PreparingChore = function (a) {
	return {ctor: 'PreparingChore', _0: a};
};
var _user$project$Main$NoOp = {ctor: 'NoOp'};
var _user$project$Main$focusOnChore = function (elementId) {
	return A2(
		_elm_lang$core$Task$attempt,
		function (_p4) {
			return _user$project$Main$NoOp;
		},
		_elm_lang$dom$Dom$focus(
			_elm_lang$core$Basics$toString(elementId)));
};
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p5 = msg;
		switch (_p5.ctor) {
			case 'ChoreMsg':
				var _p9 = _p5._1;
				var _p8 = _p5._0;
				var _p6 = A2(_user$project$Chore$update, _p9, _p8);
				var newc = _p6._0;
				var newlist = A2(_user$project$Main$updateC, newc, model);
				var newmodel = _elm_lang$core$Native_Utils.update(
					model,
					{
						allchores: _user$project$Main$discardEmpty(newlist)
					});
				var _p7 = _p9;
				if (_p7.ctor === 'RewriteChore') {
					return {
						ctor: '_Tuple2',
						_0: newmodel,
						_1: _user$project$Main$focusOnChore(
							_user$project$Chore$makeId(_p8))
					};
				} else {
					return {ctor: '_Tuple2', _0: newmodel, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'NoOp':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'PreparingChore':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							newchore: _elm_lang$core$Maybe$Just(_p5._0)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'NewChore':
				var _p10 = model.newchore;
				if (_p10.ctor === 'Nothing') {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				} else {
					var newc = A2(_user$project$Chore$init, _p10._0, model.nextid);
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								allchores: A2(
									_elm_lang$core$Basics_ops['++'],
									model.allchores,
									{
										ctor: '::',
										_0: newc,
										_1: {ctor: '[]'}
									}),
								newchore: _elm_lang$core$Maybe$Nothing,
								nextid: model.nextid + 1
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'ChangeView':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{view: _p5._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'ToggleAll':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							allchores: _user$project$Main$toggleall(model)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							allchores: A2(_user$project$Main$onlyCompleted, false, model)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
		}
	});
var _user$project$Main$enterKey = function ($int) {
	return _elm_lang$core$Native_Utils.eq($int, 13) ? _user$project$Main$NewChore : _user$project$Main$NoOp;
};
var _user$project$Main$view = function (model) {
	var numberchores = _elm_lang$core$List$length(model.allchores);
	var notcompleted = A2(_user$project$Main$onlyCompleted, false, model);
	var completed = A2(_user$project$Main$onlyCompleted, true, model);
	var lengthCompleted = _elm_lang$core$List$length(completed);
	var allchorescompleted = _elm_lang$core$Native_Utils.eq(numberchores, 0) ? false : _elm_lang$core$Native_Utils.eq(numberchores, lengthCompleted);
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h1,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('todos'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('header'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$button,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$classList(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'toggle-all', _1: true},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'alldone', _1: allchorescompleted},
											_1: {ctor: '[]'}
										}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onClick(_user$project$Main$ToggleAll),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$input,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('newchore'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$placeholder('What needs to be done?'),
										_1: {
											ctor: '::',
											_0: _user$project$Main$onKeyDown(_user$project$Main$enterKey),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Events$onInput(_user$project$Main$PreparingChore),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$value(
														function () {
															var _p11 = model.newchore;
															if (_p11.ctor === 'Nothing') {
																return '';
															} else {
																return _p11._0;
															}
														}()),
													_1: {ctor: '[]'}
												}
											}
										}
									}
								},
								{ctor: '[]'}),
							_1: {ctor: '[]'}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$ul,
						{ctor: '[]'},
						function () {
							var _p12 = model.view;
							switch (_p12.ctor) {
								case 'Completed':
									return _user$project$Main$chorelist(
										A2(_user$project$Main$onlyCompleted, true, model));
								case 'Active':
									return _user$project$Main$chorelist(
										A2(_user$project$Main$onlyCompleted, false, model));
								default:
									return _user$project$Main$chorelist(model.allchores);
							}
						}()),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$classList(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'footer', _1: true},
										_1: {
											ctor: '::',
											_0: {
												ctor: '_Tuple2',
												_0: 'hide',
												_1: _elm_lang$core$List$isEmpty(model.allchores)
											},
											_1: {ctor: '[]'}
										}
									}),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$p,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('items-left'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(
											_user$project$Main$itemslfet(notcompleted)),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$button,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class(
												A2(_user$project$Main$selectedview, model.view, _user$project$Main$All)),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Events$onClick(
													_user$project$Main$ChangeView(_user$project$Main$All)),
												_1: {ctor: '[]'}
											}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('All'),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$button,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class(
													A2(_user$project$Main$selectedview, model.view, _user$project$Main$Active)),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Events$onClick(
														_user$project$Main$ChangeView(_user$project$Main$Active)),
													_1: {ctor: '[]'}
												}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('Active'),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$button,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$class(
														A2(_user$project$Main$selectedview, model.view, _user$project$Main$Completed)),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Events$onClick(
															_user$project$Main$ChangeView(_user$project$Main$Completed)),
														_1: {ctor: '[]'}
													}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('Completed'),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$button,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$classList(
															{
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'clear-completed', _1: true},
																_1: {
																	ctor: '::',
																	_0: {
																		ctor: '_Tuple2',
																		_0: 'hide',
																		_1: _user$project$Main$ishidden(completed)
																	},
																	_1: {ctor: '[]'}
																}
															}),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Events$onClick(_user$project$Main$ClearCompleted),
															_1: {ctor: '[]'}
														}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text(
															A2(
																_elm_lang$core$Basics_ops['++'],
																'Clear completed (',
																A2(
																	_elm_lang$core$Basics_ops['++'],
																	_elm_lang$core$Basics$toString(lengthCompleted),
																	')'))),
														_1: {ctor: '[]'}
													}),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$p,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(
										A2(
											_elm_lang$core$Basics_ops['++'],
											'Currently viewing ',
											_user$project$Main$visibilitystring(model.view))),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		});
};
var _user$project$Main$main = _elm_lang$html$Html$program(
	{init: _user$project$Main$init, view: _user$project$Main$view, update: _user$project$Main$update, subscriptions: _user$project$Main$subscriptions})();
